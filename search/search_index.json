{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Posts","text":""},{"location":"2024/05/17/blogging-with-github-pages-mkdocs-and-obsidian/","title":"Blogging with Github Pages, MkDocs, and Obsidian","text":"<p>I feel like a lot of tech people have tried blogging. Personally, I've tried a couple times now across multiple different services (Substack, Medium, etc.) and nothing has really stuck for longer than a couple weeks. For me the main problem was it took a lot of effort to open the site and deal with their, not quite markdown, document editor.</p> <p>After finding and falling in love with Obsidianfor keeping track of personal notes and thoughts, I figured it would be fairly simple to also use it for blogging with just a simple Github action and using MkDocs.</p> <p>I figured this would be a good first blog post since it's something other's could benefit from and it was all still fresh in my mind!</p>"},{"location":"2024/05/17/blogging-with-github-pages-mkdocs-and-obsidian/#setting-up-the-github-repository","title":"Setting up the Github Repository","text":"<p>This is pretty trivial, on Github there are a couple \"special\" repositories you can make. One of them being <code>{github_username}.github.io</code>. When you create a repository with that name it's associated Github page will be just at that url. This differs from other repositories, where their Github pages get put at <code>{github_username}.github.io/{repository_name}</code>.</p> <p>Once you have the repository created we can start setting up Obsidian.</p>"},{"location":"2024/05/17/blogging-with-github-pages-mkdocs-and-obsidian/#setting-up-obsidian","title":"Setting up Obsidian","text":"<p>The easiest way to use Obsidian with Git is to just have your vault be the Git repository. There are ways you can make a subdirectory in a vault it's own Git repo (either via Git submodules or just putting the Git repo in the subdirectory), but that can make things way more complicated so I can cover that in a separate post if there's interest.</p> <p>To setup Obsidian Git I recommend following their Getting Started instruction page. Since we already created the repository on Github, you'll want to follow the Starting with existing remote repository instructions.</p> <p>Once you get the Git repository cloned and Obsidian Git setup there's one setting I'd like to draw your attention to.</p> <p>Vault Back Interval - this can be helpful to automatically push changes at a given interval. Be warned though, if you don't set the <code>draft</code> property on blog posts they will automatically be public when they're pushed.</p> <p>Once you get that setup it's time to start setting up MkDocs!</p>"},{"location":"2024/05/17/blogging-with-github-pages-mkdocs-and-obsidian/#setting-up-mkdocs","title":"Setting up MkDocs","text":"<p>First you're going to want to make sure to install MkDocs. I'd recommend creating a virtual python environment so it doesn't get install globally on your system.</p> <p>MkDocs uses the <code>mkdocs.yml</code> configuration file in the root of the repository.</p> <pre><code>site_description: Thomas' Blog\nsite_name: Thomas' Blog\nsite_url: http://lazarust.github.io\n\ndocs_dir: ./site/blog\nsite_dir: page\n\ntheme:\n  name: material\n  palette:\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      toggle:\n        icon: material/toggle-switch-off-outline\n        name: Switch to dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/toggle-switch\n        name: Switch to light mode\n\nplugins:\n  - search\n  - blog:\n      blog_dir: .\n  - rss:\n      match_path: blog/posts/.*\n      date_from_meta:\n        as_creation: date\n      categories:\n        - categories\n        - tags\n      enabled: true\n</code></pre> <p>As you can see there is quite a lot of references to directories in the configuration so I'll take this space to explain how I have things organized.</p> <pre><code>.\n\u251c\u2500\u2500 site/\n\u2502 \u2514\u2500\u2500 blog/\n\u2502     \u2514\u2500\u2500 posts/\n\u2502         \u2514\u2500\u2500 Blogging with Github Pages, MkDocs, and Obsidian.md #(This current blog post)\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre> <p>Initially I had named the <code>site</code> directory <code>blog</code> but that would make the path to posts <code>blog/blog/posts</code> \ud83e\udd2e. The general directory structure is decided by the built-in blog plugin inside of MkDocs material.</p> <p>At this point you should be able to run <code>mkdocs serve</code> locally to see what your blog site will look like when deployed. Try putting a markdown file in the <code>/posts/</code> directory and see if it shows up!</p>"},{"location":"2024/05/17/blogging-with-github-pages-mkdocs-and-obsidian/#setting-up-the-github-action","title":"Setting up the Github Action","text":"<p>Now that we have Obsidian automatically pushing changes and MkDocs configured the way we want. It's time to automatically publish the site. This is pretty simple via a Github action.</p> <pre><code>name: build_site\non:\n  push:\n    branches:\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - uses: actions/cache@v2\n        with:\n          key: ${{ github.ref }}\n          path: .cache\n      - run: pip install mkdocs-material mkdocs-rss-plugin\n      - run: mkdocs gh-deploy --force\n</code></pre> <p>The Github action to automatically deploy blog posts is pretty simple and really has 2 main steps after using the <code>checkout</code> and <code>setup-ptyhon</code> workflows.</p> <ol> <li><code>pip install mkdocs-material mkdocstrings-python mkdocs-rss-plugin</code></li> <li>This just installs the necessary <code>mkdocs</code> plugins. If you aren't using the Material Theme or the RSS Plugin you don't need to install them (though I highly recommend using them since they can greatly improve the experience of reading your blog).</li> <li><code>mkdocs gh-deploy --force</code></li> <li>This pushes the generated html files onto the <code>gh-pages</code> branch.</li> <li>I prefer to use <code>--force</code> so it overwrites any previous releases.</li> </ol>"},{"location":"2024/05/17/blogging-with-github-pages-mkdocs-and-obsidian/#conclusion","title":"Conclusion","text":"<p>Now it's time to get blogging! One thing I really like about this setup is that it takes very little thought to create a post and publish it. It's as easy as opening Obsidian, typing some thoughts in markdown, and having Obsidian Git automatically (or manually) push the changes to Github.</p> <p>Thanks for reading! I'm planning on blogging (or probably more micro-blogging) new things I learn and tips and tricks I find. Shoutout Simon Willison for inspiring me to do this with his webblogI definitely recommend checking it out if you haven't heard of him.</p>"},{"location":"2025/05/13/reducing-the-cognitive-load-with-todos/","title":"Reducing the Cognitive Load with TODOs","text":"<p>I've recently found myself working on some bigger projects requiring large code refactors. For personal household tasks I've been using the Apple Reminders app to keep track of what needs done when (even writing this blog post had to become a reminder for it to actually get done \ud83d\ude02).</p> <p>A big reason I like using a reminders list to keep track of things, is that it lets me have the following workflow:</p> <ol> <li>Remember I have to do something (usually this happens while I'm already doing something else)</li> <li>Create a reminder with a set day and time (I've found the time to be rather important)</li> <li>Completely forget about what needs done until my reminder app tells me</li> </ol> <p>The biggest benefit of this workflow is it helps me not get distracted by \"side missions\" and helps me focus on the task at hand.</p>"},{"location":"2025/05/13/reducing-the-cognitive-load-with-todos/#using-this-workflow-while-programming","title":"Using this workflow while programming","text":"<p>I've always been skeptical of using <code># TODO</code> comments (syntax from Python), but man has using them been an absolute game changer. While working on bigger projects, I've found it's easy for my brain to jump to the next thing I should be working on and get distracted from the piece of code I'm currently working on.</p> <p>Using a simple <code># TODO</code> helps my brain temporarily mark the next thing as \"complete\", but it still forces me to make sure it's done since it's now in the code (and will be visible on the PR).</p> <p>A bonus benefit: LLMs seem to work well with the extra guidance of TODO comments. I've found the LLM seems to stay more on track and generally give better suggestions than when there are no guiding comments.</p>"},{"location":"2025/05/13/reducing-the-cognitive-load-with-todos/#conclusion","title":"Conclusion","text":"<p>TLDR: Having a way to \"brain dump\" future tasks in a place that will surface them when appropriate is a much better solution than just trusting your brain to remember what needs done when.</p> <p>If you've made it this far thanks for reading this! I truly appreciate it. I hope to get more consistent at blogging on this site in the coming months (I wonder how many other people have said that \ud83d\ude02). Subscribe to the RSS feed if you're interested! Also follow me at https://bsky.app/profile/lazarust.bsky.social!</p>"},{"location":"2024/10/08/thoughts-after-using-zed-for-a-while/","title":"Thoughts After Using Zed For A While","text":"<p>For those who haven't heard of Zed: Zed is a lightweight code editor that, from their homepage, \"designed for high-performance collaboration with humans and AI\". I originally heard about Zed via ThePrimeagen's interview with Thorsten Ball, who is a engineer working for and on Zed. Link to the interview.</p>"},{"location":"2024/10/08/thoughts-after-using-zed-for-a-while/#what-drew-me-to-zed","title":"What drew me to Zed","text":"<p>Some things that originally pulled me towards Zed was how ridiculously fast it is. I generally used to mainly use PyCharm for most if not all of my programming. PyCharm is very feature rich, but in all honesty how often do I use 99% of those features... almost never. Zed really gives me the most barebones experience (without having to switch to NeoVim) and lets me customize anything I could want.</p> <p>Another big reason I was drawn to Zed was because it's open source! I personally believe that if there's an open source version of software that you use, as long as it has all the features you need, there's really very little reason to not use it.</p> <p>Another key draw for me is Zed's strong connection to Vim motion commands. After experimenting with both PyCharm and VSCode's Vim extensions, I found that PyCharm's native keyboard shortcuts clashed with Vim motions \u2013 a problem I've never experienced with Zed. This made it an attractive choice for me.</p> <p>Finally, the ability to easily switch between LLMs is probably my favorite feature in Zed. As someone who likes to stay up-to-date on the latest LLM, having this flexibility has been invaluable \u2013 I can try out new models directly in Zed and see if they're worth switching to. Personally, I use Ollama to easily download and run models locally.</p>"},{"location":"2024/10/08/thoughts-after-using-zed-for-a-while/#parts-of-zed-i-dont-like","title":"Parts of Zed I don't like","text":"<p>The main bone I have to pick with Zed is the lack of Pytest support. I use Pytest in most if not all of the project I contribute too. The good news is, is that it looks like there's a Github issue and pull request to add Pytest support! So this is a really small bone that will hopefully be taken care of soon.</p> <p>The only other issue I've had with Zed is being able to use a Docker container as the remote development environment. Sometimes I prefer to use Docker to manage different things around my projects and I typically like to use Docker when deploying apps in production.</p>"},{"location":"2024/10/08/thoughts-after-using-zed-for-a-while/#conclusion-pros-vs-cons","title":"Conclusion (Pros vs Cons)","text":"<p>After spending some time using Zed, I must say that it has been a resounding success for me. Its lightweight design, customization options, and connection to Vim motion commands have made it an ideal choice for my needs.</p> <p>As a TLDR: Pros:</p> <ul> <li>Ridiculously fast</li> <li>Open source</li> <li>Native Vim motions</li> <li>Easy LLM model customization</li> </ul> <p>Cons:</p> <ul> <li>Lack of Pytest Support (though this is being worked on)</li> <li>Lack of Docker container support as the remote development environment</li> </ul>"},{"location":"archive/2025/","title":"2025","text":""},{"location":"archive/2024/","title":"2024","text":""},{"location":"category/productivity/","title":"productivity","text":""},{"location":"category/todo-list/","title":"todo-list","text":""},{"location":"category/zed/","title":"zed","text":""},{"location":"category/ollama/","title":"ollama","text":""},{"location":"category/blogging/","title":"blogging","text":""},{"location":"category/obsidian/","title":"obsidian","text":""},{"location":"category/mkdocs/","title":"mkdocs","text":""}]}